// Generated by CoffeeScript 1.4.0
(function() {
  var Cell, Game, assert, _ref;

  _ref = require('../src/life'), Cell = _ref.Cell, Game = _ref.Game;

  assert = require('assert');

  describe('Cell', function() {
    it('should exist', function() {
      var cell;
      cell = new Cell;
      if (!(cell != null)) {
        return assert.fail('Cell was not created');
      }
    });
    it('should contain x position', function() {
      var cell;
      cell = new Cell(1, 0);
      return assert.equal(cell.x, 1);
    });
    return it('should contain y position', function() {
      var cell;
      cell = new Cell(0, 1);
      return assert.equal(cell.y, 1);
    });
  });

  describe('Game', function() {
    var cell1, cell2, cell3, cell4, cell5, game;
    cell1 = new Cell(20, 3);
    cell2 = new Cell(1, 60);
    cell3 = new Cell(8, 8);
    cell4 = new Cell(8, 9);
    cell5 = new Cell(7, 7);
    game = new Game([cell1, cell2, cell3, cell4, cell5]);
    it('should exist', function() {
      if (!(game != null)) {
        return assert.fail('Game was not created');
      }
    });
    it('should have 2 cells', function() {
      return assert.equal(5, game.gen1.length);
    });
    it('should have first cell 20, 3', function() {
      assert.equal(game.gen1[0].x, 20);
      return assert.equal(game.gen1[0].y, 3);
    });
    it('should have second cell 1, 60', function() {
      assert.equal(game.gen1[1].x, 1);
      return assert.equal(game.gen1[1].y, 60);
    });
    it('should get max x', function() {
      return assert.equal(game.getMaxX(), 20);
    });
    it('should get max y', function() {
      return assert.equal(game.getMaxY(), 60);
    });
    it('should get min x', function() {
      return assert.equal(game.getMinX(), 1);
    });
    it('should get min y', function() {
      return assert.equal(game.getMinY(), 3);
    });
    it('should find no neighbours', function() {
      var neighbours;
      neighbours = game.getNeighbours(cell1);
      return assert.equal(0, neighbours.length);
    });
    it('should find 1 neighbour', function() {
      var neighbours;
      neighbours = game.getNeighbours(cell5);
      return assert.equal(1, neighbours.length);
    });
    return it('should find 2 neighbours', function() {
      var neighbours;
      neighbours = game.getNeighbours(cell3);
      return assert.equal(2, neighbours.length);
    });
  });

}).call(this);
