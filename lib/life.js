// Generated by CoffeeScript 1.4.0
(function() {
  var Cell, Game, root;

  Cell = (function() {

    Cell.x = 0;

    Cell.y = 0;

    function Cell(xin, yin) {
      this.x = xin;
      this.y = yin;
    }

    return Cell;

  })();

  Game = (function() {

    Game.prototype.generation = 0;

    Game.prototype.isFirstGen = true;

    Game.prototype.gen2 = [];

    Game.prototype.currentGeneration = function() {
      if (this.isFirstGen) {
        return this.gen1;
      } else {
        return this.gen2;
      }
    };

    function Game(gen1) {
      this.gen1 = gen1;
    }

    Game.prototype.getXVals = function() {
      var cell, _i, _len, _ref, _results;
      _ref = this.currentGeneration();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        _results.push(cell.x);
      }
      return _results;
    };

    Game.prototype.getYVals = function() {
      var cell, _i, _len, _ref, _results;
      _ref = this.currentGeneration();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        _results.push(cell.y);
      }
      return _results;
    };

    Game.prototype.getMaxX = function() {
      return Math.max.apply(Math, this.getXVals());
    };

    Game.prototype.getMaxY = function() {
      return Math.max.apply(Math, this.getYVals());
    };

    Game.prototype.getMinX = function() {
      return Math.min.apply(Math, this.getXVals());
    };

    Game.prototype.getMinY = function() {
      return Math.min.apply(Math, this.getYVals());
    };

    Game.prototype.getNeighbours = function(cell) {
      var isN, isS, isSide, neighbourFilter;
      isN = function(origin, cell) {
        var _ref;
        return (origin.x - 1 <= (_ref = cell.x) && _ref <= origin.x + 1) && cell.y === origin.y - 1;
      };
      isSide = function(origin, cell) {
        return (cell.x === origin.x - 1 || cell.x === origin.x + 1) && cell.y === origin.y;
      };
      isS = function(origin, cell) {
        var _ref;
        return (origin.x - 1 <= (_ref = cell.x) && _ref <= origin.x + 1) && cell.y === origin.y + 1;
      };
      neighbourFilter = function(c) {
        return isN(cell, c) || isSide(cell, c) || isS(cell, c);
      };
      return this.currentGeneration().filter(neighbourFilter);
    };

    return Game;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Cell = Cell;

  root.Game = Game;

}).call(this);
